name: CI - Django Docker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:15
        env:
          POSTGRES_USER: prompts
          POSTGRES_PASSWORD: prompts
          POSTGRES_DB: promptsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U prompts"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run migrations
        env:
          DB_NAME: promptsdb
          DB_USER: prompts
          DB_PASSWORD: prompts
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          python manage.py migrate --noinput

      - name: Run tests
        env:
          DB_NAME: promptsdb
          DB_USER: prompts
          DB_PASSWORD: prompts
          DB_HOST: localhost
          DB_PORT: 5432
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest --maxfail=1 --disable-warnings -q

      - name: Lint (flake8)
        run: |
          pip install flake8
          flake8 .

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        if: github.ref == 'refs/heads/main'
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/yeslawyer-backend:sha-${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE

  deploy-ecs:
    name: Deploy to ECS (Fargate)
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Render task definition
        id: render
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/yeslawyer-backend:sha-${{ github.sha }}
          sed -e "s~\${ECR_REGISTRY}/${ECR_REPOSITORY}:latest~$IMAGE~" \
              -e "s~\${AWS_REGION}~${{ secrets.AWS_REGION }}~" \
              -e "s~\${EXECUTION_ROLE_ARN}~${{ secrets.ECS_EXECUTION_ROLE_ARN }}~" \
              -e "s~\${TASK_ROLE_ARN}~${{ secrets.ECS_TASK_ROLE_ARN }}~" \
              -e "s~\${DB_HOST}~${{ secrets.DB_HOST }}~" \
              -e "s~\${DB_PORT}~${{ secrets.DB_PORT }}~" \
              -e "s~\${DB_NAME}~${{ secrets.DB_NAME }}~" \
              -e "s~\${DB_USER}~${{ secrets.DB_USER }}~" \
              -e "s~\${DB_PASSWORD}~${{ secrets.DB_PASSWORD }}~" \
              -e "s~\${REDIS_HOST}~${{ secrets.REDIS_HOST }}~" \
              -e "s~\${REDIS_PORT}~${{ secrets.REDIS_PORT }}~" \
              -e "s~\${OPENAI_API_KEY}~${{ secrets.OPENAI_API_KEY }}~" \
              ecs-task-def.json > task-def-rendered.json
          echo "task-def=task-def-rendered.json" >> $GITHUB_OUTPUT

      - name: Deploy service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-def-rendered.json
          service: ${{ secrets.ECS_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true